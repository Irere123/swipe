generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String
  bio                 String?
  avatarUrl           String
  schoolName          String?
  birthday            String?
  gender              String?
  location            String?
  facebookId          String?
  twitterId           String?
  tokenVersion        Int       @default(1)
  createdAt           DateTime  @default(now())
  owner               Feed?
  matches1            Match[]   @relation("user1")
  matches2            Match[]   @relation("user2")
  messagesSent        Message[] @relation("sender")
  messagesRecipiented Message[] @relation("recipient")
  views               View[]    @relation("viewer")
  targets             View[]    @relation("target")

  @@map("users")
}

model Match {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  read1     Boolean   @default(false)
  read2     Boolean   @default(false)
  unmatched Boolean   @default(false)
  createdAt DateTime  @default(now())
  user1     User?     @relation(name: "user1", fields: [userId1], references: [id])
  userId1   String?   @db.Uuid
  user2     User?     @relation(name: "user2", fields: [userId2], references: [id])
  userId2   String?   @db.Uuid
  messages  Message[] @relation("match")

  @@map("matches")
}

model Message {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  match       Match?   @relation("match", fields: [matchId], references: [id], onDelete: SetNull)
  matchId     String?  @db.Uuid
  sender      User?    @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String?  @db.Uuid
  recipient   User?    @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String?  @db.Uuid
  createAt    DateTime @default(now()) @db.Timestamp()

  @@map("messages")
}

model Feed {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cursor  Int?
  userIds String[]
  owner   User?    @relation(fields: [ownerId], references: [id])
  ownerId String   @unique @db.Uuid

  @@map("feed")
}

model View {
  viewer    User?    @relation("viewer", fields: [viewerId], references: [id], onDelete: Cascade)
  viewerId  String   @db.Uuid
  target    User?    @relation("target", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String   @db.Uuid
  liked     Boolean?
  hated     Boolean?
  createdAt DateTime @default(now())

  @@id([targetId, viewerId])
  @@map("views")
}

model Report {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@map("reports")
}
